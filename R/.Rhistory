#' @return List with all parameters of the joke
#' @examples
#' \dontrun{
#'
#' # Retrieve random joke
#' rand_joke1 <- get_random_joke()
#'
#' }
#' @import httr jsonlite
#' @export
get_random_joke <- function(){
# -------------------
# Send a GET request
resp <- GET("https://official-joke-api.appspot.com/jokes/random")
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
return(parsed)
}
#' # Retrieve ten knock-knock jokes,return list
#' joke3 <- get_joke(type = "knock-knock",choice="ten",return_type="list")
#'
#' # Retrieve ten general jokes,return dataframe
#' joke4 <- get_joke(type = "general",choice="ten",return_type="dataframe")
#'
#' # Retrieve data with default value
#' joke5 <- get_joke()
#' }
#' @export
get_joke <- function(type = c("general", "knock-knock", "programming"),
choice=c("random","ten"),return_type=c("list","dataframe")){
# Check if type is null,set default value
type <- match.arg(type)
# Check if choice is null,set default value
choice <- match.arg(choice)
# Check if return_type is null,set default value
return_type <- match.arg(return_type)
# modify url from input type and choice
url <- paste0("https://official-joke-api.appspot.com/jokes/",type,"/",choice)
# -------------------
# Send a GET request
resp <- GET(url)
# -------------------
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
resp.text<-content(resp, "text")
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}else if(return_type == "dataframe"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
}
return(parsed)
#' # Retrieve ten knock-knock jokes,return list
#' joke3 <- get_joke(type = "knock-knock",choice="ten",return_type="list")
#'
#' # Retrieve ten general jokes,return dataframe
#' joke4 <- get_joke(type = "general",choice="ten",return_type="dataframe")
#'
#' # Retrieve data with default value
#' joke5 <- get_joke()
#' }
#' @export
get_joke <- function(type = c("general", "knock-knock", "programming"),
choice=c("random","ten"),return_type=c("list","dataframe")){
# Check if type is null,set default value
type <- match.arg(type)
# Check if choice is null,set default value
choice <- match.arg(choice)
# Check if return_type is null,set default value
return_type <- match.arg(return_type)
# modify url from input type and choice
url <- paste0("https://official-joke-api.appspot.com/jokes/",type,"/",choice)
# -------------------
# Send a GET request
resp <- GET(url)
# -------------------
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
resp.text<-content(resp, "text")
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}else if(return_type == "dataframe"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
}
return(parsed)
}
get_joke("general","random","dataframe")
get_joke(type = "general",choice="ten",return_type="dataframe")
get_random_joke()
get_joke()
hi
library(httr)
()
get_joke()
get_joke("general","random","dataframe")
get_joke(type = "general",choice="ten",return_type="dataframe")
get_random_joke()
#' @return List with all parameters of the joke
#' @examples
#' \dontrun{
#'
#' # Retrieve random joke
#' rand_joke1 <- get_random_joke()
#'
#' }
#' @import httr jsonlite
#' @export
get_random_joke <- function(){
# -------------------
# Send a GET request
resp <- GET("https://official-joke-api.appspot.com/jokes/random")
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(content(resp, "text"), simplifyVector = FALSE)
return(parsed)
}
#' # Retrieve ten knock-knock jokes,return list
#' joke3 <- get_joke(type = "knock-knock",choice="ten",return_type="list")
#'
#' # Retrieve ten general jokes,return dataframe
#' joke4 <- get_joke(type = "general",choice="ten",return_type="dataframe")
#'
#' # Retrieve data with default value
#' joke5 <- get_joke()
#' }
#' @export
get_joke <- function(type = c("general", "knock-knock", "programming"),
choice=c("random","ten"),return_type=c("list","dataframe")){
# Check if type is null,set default value
type <- match.arg(type)
# Check if choice is null,set default value
choice <- match.arg(choice)
# Check if return_type is null,set default value
return_type <- match.arg(return_type)
# modify url from input type and choice
url <- paste0("https://official-joke-api.appspot.com/jokes/",type,"/",choice)
# -------------------
# Send a GET request
resp <- GET(url)
# -------------------
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
resp.text<-content(resp, "text")
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}else if(return_type == "dataframe"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
}
return(parsed)
#' # Retrieve ten knock-knock jokes,return list
#' joke3 <- get_joke(type = "knock-knock",choice="ten",return_type="list")
#'
#' # Retrieve ten general jokes,return dataframe
#' joke4 <- get_joke(type = "general",choice="ten",return_type="dataframe")
#'
#' # Retrieve data with default value
#' joke5 <- get_joke()
#' }
#' @export
get_joke <- function(type = c("general", "knock-knock", "programming"),
choice=c("random","ten"),return_type=c("list","dataframe")){
# Check if type is null,set default value
type <- match.arg(type)
# Check if choice is null,set default value
choice <- match.arg(choice)
# Check if return_type is null,set default value
return_type <- match.arg(return_type)
# modify url from input type and choice
url <- paste0("https://official-joke-api.appspot.com/jokes/",type,"/",choice)
# -------------------
# Send a GET request
resp <- GET(url)
# -------------------
# Turn API errors into R errors
if (http_error(resp)) {
stop(
sprintf(
"anapioficeandfire API request failed [%s]\n%s\n<%s>",
status_code(resp),
parsed$message,
parsed$documentation_url
),
call. = FALSE
)
}
resp.text<-content(resp, "text")
if(return_type=="list"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text, simplifyVector = FALSE)
}else if(return_type == "dataframe"){
# -------------------
# Parse JSON object
parsed <- jsonlite::fromJSON(resp.text)
}
return(parsed)
}
get_joke("general","random","dataframe")
get_joke(type = "general",choice="ten",return_type="dataframe")
get_random_joke()
get_joke()
get_joke()
library(httr)
library(httr)
library(httr)
library(devtools)
library(roxygen2)
document()
check()
get_joke("general","random","dataframe")
get_joke(type = "general",choice="ten",return_type="dataframe")
get_random_joke()
get_joke()
library(devtools)
library(roxygen2)
document()
check()
check()
check()
library(devtools)
library(roxygen2)
document()
check()
